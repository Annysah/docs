---
title: Kubernetes Ingress TLS
html_title: Kubernetes Ingress TLS
description: Best practices and detailed instructions for configuring Kubernetes ingress TLS.
---

## Connecting things outside Kubernetes to things inside Kubernetes

An [`Ingress`](https://kubernetes.io/docs/concepts/services-networking/ingress/) is a Kubernetes resource that lets you define a reverse proxy that exposes services in your cluster to other internal infrastructure outside of your cluster or to the internet. 
To enable this type of connection, you can specify a `[kubernetes.io/tls](http://kubernetes.io/tls)` secret for your ingress to use TLS (see [docs here](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)).

<Alert severity="info">
  <div>
About TLS secrets. Kubernetes has the concept of Resources, which are typically YAML files with some data that are managed by the Kubernetes API Server, and that you can volume mount into containers and authorize users and other components to interact with. The `[kubernetes.io/tls](http://kubernetes.io/tls)` Secret type is a specific sort of secret that's designed to hold an x509 certificate (`tls.crt`) and key (`tls.key`) for use with TLS ([learn more](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets)). Like any other Secret, TLS Secrets can be mounted into pods, read/written by clients with appropriate access, and can be referenced by some other Resource types.
  </div>
</Alert>


An Admission Controller intercepts requests to the Kubernetes API server and are used to limit requests to create, delete, modify objects or connect to proxy. An Ingress Controller is a type of Admission Controller that gets called when an `Ingress` resource is created, updated, or deleted, and manages the proxy. For example, the Nginx Admission Controller will reconfigure Nginx for you. 

### Our Recommendation

When connecting things outside Kubernetes to things inside Kubernetes, we recommend using Smallstep Certificate Manager in combination with `[step-issuer](https://github.com/smallstep/step-issuer)` and [Kubernetes’ cert-manager](https://cert-manager.io/docs/) utility. [You can find the detailed instructions here.](/docs/certificate-manager/kubernetes-step-issuer)

### Extra Credit: I want Mutual TLS

We often talk with users who want to enable mutual TLS authentication (mTLS) for these connections. To add mutual TLS, in addition to issuing server certificates for your Ingress Controllers, you need to issue certificates to the clients connecting into your Kubernetes cluster. These clients could be humans, applications using an API, external services, or any other workload that needs to interact with the cluster.

The Smallstep toolchain is designed to provide reach to all the things in your system. We can automate the issuance and renewal of certificates to secure all your mutual TLS connections. We make it easy to connect [users to single sign-on](https://smallstep.com/docs/certificate-manager/oidc), or unlock the [power of internal ACME](https://smallstep.com/docs/certificate-manager/acme) for automation. Have Questions? We are here to help. Just [reach out](mailto:cs@smallstep.com) and ask. 

<Alert severity="info">
  <div>
This content is designed to help the reader configure Kubernetes to use private certificates. If you are looking to enable publicly trusted certificates to connect your cluster to the internet, we recommend using Let’s Encrypt with the [Kubernetes cert-manager](https://cert-manager.io/docs/) project.
  </div>
</Alert>
